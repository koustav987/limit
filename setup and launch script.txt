#!/bin/bash

# Crop Yield Predictor Setup Script
echo "🌱 Setting up Crop Yield Predictor Application..."

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}$1${NC}"
}

# Check if Python is installed
check_python() {
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        print_status "Python $PYTHON_VERSION found"
        return 0
    else
        print_error "Python 3 is not installed. Please install Python 3.7+ first."
        return 1
    fi
}

# Check if Node.js is installed
check_node() {
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        print_status "Node.js $NODE_VERSION found"
        return 0
    else
        print_error "Node.js is not installed. Please install Node.js 14+ first."
        return 1
    fi
}

# Create project structure
create_structure() {
    print_header "📁 Creating project structure..."
    
    mkdir -p crop-yield-predictor/{backend,frontend/src,frontend/public}
    cd crop-yield-predictor
    
    print_status "Project structure created"
}

# Setup backend
setup_backend() {
    print_header "🐍 Setting up Flask backend..."
    
    cd backend
    
    # Create virtual environment
    python3 -m venv venv
    source venv/bin/activate || source venv/Scripts/activate
    
    # Install dependencies
    pip install --upgrade pip
    pip install Flask Flask-CORS pandas numpy scikit-learn joblib matplotlib seaborn gunicorn
    
    # Create requirements.txt
    pip freeze > requirements.txt
    
    print_status "Backend dependencies installed"
    cd ..
}

# Setup frontend
setup_frontend() {
    print_header "⚛️ Setting up React frontend..."
    
    cd frontend
    
    # Initialize React app if not exists
    if [ ! -f "package.json" ]; then
        npx create-react-app . --template typescript
    fi
    
    # Install additional dependencies
    npm install lucide-react
    npm install -D tailwindcss postcss autoprefixer
    npx tailwindcss init -p
    
    print_status "Frontend dependencies installed"
    cd ..
}

# Create configuration files
create_configs() {
    print_header "⚙️ Creating configuration files..."
    
    # Tailwind config
    cat > frontend/tailwind.config.js << EOF
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
EOF

    # CSS file with Tailwind
    cat > frontend/src/index.css << EOF
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
EOF

    print_status "Configuration files created"
}

# Create launch scripts
create_launch_scripts() {
    print_header "🚀 Creating launch scripts..."
    
    # Backend launch script
    cat > start_backend.sh << EOF
#!/bin/bash
echo "🚀 Starting Flask backend..."
cd backend
source venv/bin/activate || source venv/Scripts/activate
python app.py
EOF

    # Frontend launch script
    cat > start_frontend.sh << EOF
#!/bin/bash
echo "🚀 Starting React frontend..."
cd frontend
npm start
EOF

    # Full launch script
    cat > start_all.sh << EOF
#!/bin/bash
echo "🌱 Starting Crop Yield Predictor Application..."

# Function to kill background processes on exit
cleanup() {
    echo "🛑 Stopping all services..."
    kill \$(jobs -p) 2>/dev/null
    exit
}

trap cleanup SIGINT SIGTERM

# Start backend
echo "🐍 Starting backend server..."
cd backend
source venv/bin/activate || source venv/Scripts/activate
python app.py &
BACKEND_PID=\$!

# Wait a moment for backend to start
sleep 3

# Start frontend
echo "⚛️ Starting frontend server..."
cd ../frontend
npm start &
FRONTEND_PID=\$!

echo "✅ Application started!"
echo "📊 Backend API: http://localhost:5000"
echo "🌐 Frontend UI: http://localhost:3000"
echo "Press Ctrl+C to stop all services"

# Wait for background processes
wait
EOF

    # Make scripts executable
    chmod +x start_backend.sh start_frontend.sh start_all.sh
    
    print_status "Launch scripts created"
}

# Main setup function
main() {
    print_header "🌱 Crop Yield Predictor Setup"
    echo "This script will set up the complete application with backend and frontend."
    echo ""
    
    # Check prerequisites
    check_python || exit 1
    check_node || exit 1
    
    # Create and setup project
    create_structure
    setup_backend
    setup_frontend
    create_configs
    create_launch_scripts
    
    print_header "✅ Setup Complete!"
    echo ""
    echo "Project structure:"
    echo "📁 crop-yield-predictor/"
    echo "  ├── 📁 backend/          (Flask API)"
    echo "  ├── 📁 frontend/         (React UI)"
    echo "  ├── 🚀 start_backend.sh  (Start backend only)"
    echo "  ├── 🚀 start_frontend.sh (Start frontend only)"
    echo "  └── 🚀 start_all.sh      (Start both services)"
    echo ""
    echo "To start the application:"
    echo "1. Copy your app.py file to the backend/ directory"
    echo "2. Copy your React component to frontend/src/App.tsx"
    echo "3. Run: ./start_all.sh"
    echo ""
    echo "Or start services individually:"
    echo "- Backend only: ./start_backend.sh"
    echo "- Frontend only: ./start_frontend.sh"
    echo ""
    print_status "Ready to launch! 🚀"
}

# Run main function
main
# ðŸš€ Quick Launch Guide

## Step-by-Step Launch Instructions

### 1. Save the Files

Create a new folder and save these files:

```
crop-yield-predictor/
â”œâ”€â”€ app.py                    # Flask backend (from artifact 1)
â”œâ”€â”€ requirements.txt          # Python dependencies (from artifact 3)
â”œâ”€â”€ Dockerfile               # Docker config (from artifact 4)
â”œâ”€â”€ docker-compose.yml       # Docker compose (from artifact 5)
â”œâ”€â”€ package.json             # React dependencies (from artifact 6)
â”œâ”€â”€ setup.sh                 # Setup script (from artifact 7)
â””â”€â”€ README.md               # Documentation (from artifact 8)
```

### 2. Quick Start Options

#### Option A: Automatic Setup (Easiest)
```bash
# Make setup script executable
chmod +x setup.sh

# Run setup (creates complete project structure)
./setup.sh

# Copy the React component code to frontend/src/App.tsx
# Then start the application
./start_all.sh
```

#### Option B: Manual Setup
```bash
# Backend setup
mkdir backend && cd backend
python3 -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate
pip install -r requirements.txt
# Copy app.py to this directory
python app.py &

# Frontend setup (in new terminal)
npx create-react-app frontend
cd frontend
npm install lucide-react tailwindcss
# Replace src/App.js with the React component code
npm start
```

#### Option C: Docker (Production)
```bash
# Build and run with Docker
docker-compose up --build

# Access:
# Frontend: http://localhost:3000
# Backend API: http://localhost:5000
```

### 3. Access the Application

- **Frontend UI**: http://localhost:3000
- **Backend API**: http://localhost:5000
- **API Documentation**: http://localhost:5000 (shows available endpoints)

### 4. Test the Prediction

1. Open http://localhost:3000
2. Fill in the form:
   - Area: Select "Punjab"
   - Crop: Select "Wheat" 
   - Soil Type: Select "Loamy"
   - Temperature: 25.5
   - Humidity: 65.0
   - pH: 6.5
   - Annual Rainfall: 850
3. Click "Predict Yield"
4. View the predicted yield result

### 5. Troubleshooting

**If backend won't start:**
```bash
# Check Python version
python3 --version

# Install missing dependencies
pip install Flask Flask-CORS pandas numpy scikit-learn joblib

# Run directly
cd backend
python app.py
```

**If frontend won't start:**
```bash
# Check Node.js version
node --version

# Clear cache and reinstall
rm -rf node_modules package-lock.json
npm install
npm start
```

**If API connection fails:**
- Ensure backend is running on port 5000
- Check if frontend is trying to connect to correct URL
- Look for CORS errors in browser console

### 6. File Contents Reference

The React frontend component should be saved as `frontend/src/App.tsx` and contains:
- Modern crop yield prediction interface
- Real-time API connection status
- Form validation and error handling
- Beautiful gradient design with icons
- Responsive layout for all devices

The Flask backend `app.py` includes:
- Complete ML pipeline with Random Forest and Linear Regression
- RESTful API with health checks
- Automatic model training with synthetic data
- Input validation and error handling
- CORS support for frontend integration

### 7. Next Steps

Once running, you can:
- Upload your own crop yield dataset
- Modify the ML models in the backend
- Customize the frontend UI
- Add new features like data visualization
- Deploy to cloud platforms (AWS, Heroku, etc.)

---

**ðŸŽ‰ You're ready to predict crop yields!** The application provides a complete end-to-end solution for agricultural yield prediction using machine learning.